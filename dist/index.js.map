{"version":3,"file":"index.js","sources":["../src/cache.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default class Cache<T, V> {\n  public size = 0;\n  public misses = 0;\n  public hits = 0;\n\n  constructor(\n    private limit: number,\n    private func: (obj: T) => V,\n    private store?: any,\n  ) {\n    this.store = store || new Map();\n  }\n\n  get(key: T): V {\n    let value = this.store.get(key);\n\n    if (this.store.has(key)) {\n      this.hits++;\n\n      return this.store.get(key);\n    } else {\n      this.misses++;\n      value = this.set(key, this.func(key));\n    }\n\n    return value;\n  }\n\n  set(key: T, value: V) {\n    if (this.limit > this.size) {\n      this.size++;\n      this.store.set(key, value);\n    }\n\n    return value;\n  }\n\n  purge() {\n    this.store.clear();\n    this.size = 0;\n    this.hits = 0;\n    this.misses = 0;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-useless-escape */\n/**\n @module @ember/string\n */\nimport Cache from './cache.ts';\n\n// STATE within a module is frowned upon, this exists\n// to support Ember.STRINGS but shield ember internals from this legacy global\n// API.\nlet STRINGS: { [key: string]: string } = {};\n\nexport function setStrings(strings: { [key: string]: string }) {\n  STRINGS = strings;\n}\n\nexport function getStrings(): { [key: string]: string } {\n  return STRINGS;\n}\n\nexport function getString(name: string): string | undefined {\n  return STRINGS[name];\n}\n\nconst STRING_DASHERIZE_REGEXP = /[ _]/g;\n\nconst STRING_DASHERIZE_CACHE = new Cache<string, string>(1000, (key) =>\n  decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'),\n);\n\nconst STRING_CAMELIZE_REGEXP_1 = /(\\-|\\_|\\.|\\s)+(.)?/g;\nconst STRING_CAMELIZE_REGEXP_2 = /(^|\\/)([A-Z])/g;\n\nconst CAMELIZE_CACHE = new Cache<string, string>(1000, (key) =>\n  key\n    .replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) =>\n      chr ? chr.toUpperCase() : '',\n    )\n    .replace(STRING_CAMELIZE_REGEXP_2, (match /*, separator, chr */) =>\n      match.toLowerCase(),\n    ),\n);\n\nconst STRING_CLASSIFY_REGEXP_1 = /^(\\-|_)+(.)?/;\nconst STRING_CLASSIFY_REGEXP_2 = /(.)(\\-|\\_|\\.|\\s)+(.)?/g;\nconst STRING_CLASSIFY_REGEXP_3 = /(^|\\/|\\.)([a-z])/g;\n\nconst CLASSIFY_CACHE = new Cache<string, string>(1000, (str) => {\n  const replace1 = (_match: string, _separator: string, chr: string) =>\n    chr ? `_${chr.toUpperCase()}` : '';\n  const replace2 = (\n    _match: string,\n    initialChar: string,\n    _separator: string,\n    chr: string,\n  ) => initialChar + (chr ? chr.toUpperCase() : '');\n  const parts = str.split('/');\n\n  for (let i = 0; i < parts.length; i++) {\n    parts[i] = (parts as any)[i]\n      .replace(STRING_CLASSIFY_REGEXP_1, replace1)\n      .replace(STRING_CLASSIFY_REGEXP_2, replace2);\n  }\n\n  return parts\n    .join('/')\n    .replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) =>\n      match.toUpperCase(),\n    );\n});\n\nconst STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\nconst STRING_UNDERSCORE_REGEXP_2 = /\\-|\\s+/g;\n\nconst UNDERSCORE_CACHE = new Cache<string, string>(1000, (str) =>\n  str\n    .replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2')\n    .replace(STRING_UNDERSCORE_REGEXP_2, '_')\n    .toLowerCase(),\n);\n\nconst STRING_CAPITALIZE_REGEXP = /(^|\\/)([a-z\\u00C0-\\u024F])/g;\n\nconst CAPITALIZE_CACHE = new Cache<string, string>(1000, (str) =>\n  str.replace(STRING_CAPITALIZE_REGEXP, (match /*, separator, chr */) =>\n    match.toUpperCase(),\n  ),\n);\n\nconst STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\n\nconst DECAMELIZE_CACHE = new Cache<string, string>(1000, (str) =>\n  str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase(),\n);\n\n/**\n  Splits a string into separate units separated by spaces, eliminating any\n  empty strings in the process. This is a convenience method for split that\n  is mostly useful when applied to the `String.prototype`.\n\n  ```javascript\n  import { w } from '@ember/string';\n\n  w(\"alpha beta gamma\").forEach(function(key) {\n    console.log(key);\n  });\n\n  // > alpha\n  // > beta\n  // > gamma\n  ```\n\n  @method w\n  @param {String} str The string to split\n  @return {Array} array containing the split strings\n  @public\n*/\nexport function w(str: string): string[] {\n  return str.split(/\\s+/);\n}\n\n/**\n  Converts a camelized string into all lower case separated by underscores.\n\n  ```javascript\n  import { decamelize } from '@ember/string';\n\n  decamelize('innerHTML');          // 'inner_html'\n  decamelize('action_name');        // 'action_name'\n  decamelize('css-class-name');     // 'css-class-name'\n  decamelize('my favorite items');  // 'my favorite items'\n  ```\n\n  @method decamelize\n  @param {String} str The string to decamelize.\n  @return {String} the decamelized string.\n  @public\n*/\nexport function decamelize(str: string): string {\n  return DECAMELIZE_CACHE.get(str);\n}\n\n/**\n  Replaces underscores, spaces, or camelCase with dashes.\n\n  ```javascript\n  import { dasherize } from '@ember/string';\n\n  dasherize('innerHTML');                // 'inner-html'\n  dasherize('action_name');              // 'action-name'\n  dasherize('css-class-name');           // 'css-class-name'\n  dasherize('my favorite items');        // 'my-favorite-items'\n  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n  ```\n\n  @method dasherize\n  @param {String} str The string to dasherize.\n  @return {String} the dasherized string.\n  @public\n*/\nexport function dasherize(str: string): string {\n  return STRING_DASHERIZE_CACHE.get(str);\n}\n\n/**\n  Returns the lowerCamelCase form of a string.\n\n  ```javascript\n  import { camelize } from '@ember/string';\n\n  camelize('innerHTML');                   // 'innerHTML'\n  camelize('action_name');                 // 'actionName'\n  camelize('css-class-name');              // 'cssClassName'\n  camelize('my favorite items');           // 'myFavoriteItems'\n  camelize('My Favorite Items');           // 'myFavoriteItems'\n  camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'\n  ```\n\n  @method camelize\n  @param {String} str The string to camelize.\n  @return {String} the camelized string.\n  @public\n*/\nexport function camelize(str: string): string {\n  return CAMELIZE_CACHE.get(str);\n}\n\n/**\n  Returns the UpperCamelCase form of a string.\n\n  ```javascript\n  import { classify } from '@ember/string';\n\n  classify('innerHTML');                   // 'InnerHTML'\n  classify('action_name');                 // 'ActionName'\n  classify('css-class-name');              // 'CssClassName'\n  classify('my favorite items');           // 'MyFavoriteItems'\n  classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'\n  ```\n\n  @method classify\n  @param {String} str the string to classify\n  @return {String} the classified string\n  @public\n*/\nexport function classify(str: string): string {\n  return CLASSIFY_CACHE.get(str);\n}\n\n/**\n  More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n  form of a string.\n\n  ```javascript\n  import { underscore } from '@ember/string';\n\n  underscore('innerHTML');                 // 'inner_html'\n  underscore('action_name');               // 'action_name'\n  underscore('css-class-name');            // 'css_class_name'\n  underscore('my favorite items');         // 'my_favorite_items'\n  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n  ```\n\n  @method underscore\n  @param {String} str The string to underscore.\n  @return {String} the underscored string.\n  @public\n*/\nexport function underscore(str: string): string {\n  return UNDERSCORE_CACHE.get(str);\n}\n\n/**\n  Returns the Capitalized form of a string\n\n  ```javascript\n  import { capitalize } from '@ember/string';\n\n  capitalize('innerHTML')                 // 'InnerHTML'\n  capitalize('action_name')               // 'Action_name'\n  capitalize('css-class-name')            // 'Css-class-name'\n  capitalize('my favorite items')         // 'My favorite items'\n  capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'\n  ```\n\n  @method capitalize\n  @param {String} str The string to capitalize.\n  @return {String} The capitalized string.\n  @public\n*/\nexport function capitalize(str: string): string {\n  return CAPITALIZE_CACHE.get(str);\n}\n"],"names":[],"mappings":"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"}